name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: barq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/barq-frontend/package-lock.json

    - name: Restore .NET dependencies
      run: dotnet restore Backend/BARQ.sln

    - name: Build Backend
      run: dotnet build Backend/BARQ.sln --no-restore --configuration Release

    - name: Run Backend Tests
      run: dotnet test Backend/BARQ.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=barq_test;Username=postgres;Password=postgres"
        Redis__ConnectionString: "localhost:6379"

    - name: Install Frontend dependencies
      run: npm ci
      working-directory: Frontend/barq-frontend

    - name: Run Frontend Linting
      run: npm run lint
      working-directory: Frontend/barq-frontend

    - name: Run Frontend Tests
      run: npm run test:ci
      working-directory: Frontend/barq-frontend

    - name: Build Frontend
      run: npm run build
      working-directory: Frontend/barq-frontend

    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        files: Backend/**/coverage.cobertura.xml
        flags: backend

    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        files: Frontend/barq-frontend/coverage/lcov.info
        flags: frontend

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Init
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp,javascript'
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3


  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend
        file: ./Backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./Frontend/barq-frontend
        file: ./Frontend/barq-frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name barq-staging-cluster

    - name: Deploy to staging
      run: |
        kubectl apply -f Infrastructure/kubernetes/ -n barq-staging
        kubectl set image deployment/barq-backend barq-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:develop-${{ github.sha }} -n barq-staging
        kubectl set image deployment/barq-frontend barq-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:develop-${{ github.sha }} -n barq-staging
        kubectl rollout status deployment/barq-backend -n barq-staging --timeout=300s
        kubectl rollout status deployment/barq-frontend -n barq-staging --timeout=300s

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=barq-backend -n barq-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=barq-frontend -n barq-staging --timeout=300s
        
        # Get service URLs
        BACKEND_URL=$(kubectl get service barq-backend-service -n barq-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        FRONTEND_URL=$(kubectl get service barq-frontend-service -n barq-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Health checks
        curl -f http://$BACKEND_URL/health || exit 1
        curl -f http://$FRONTEND_URL/health || exit 1

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name barq-production-cluster

    - name: Blue-Green Deployment
      run: |
        # Create green deployment
        kubectl apply -f Infrastructure/kubernetes/ -n barq-system
        
        # Update green deployment with new images
        kubectl set image deployment/barq-backend barq-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:main-${{ github.sha }} -n barq-system
        kubectl set image deployment/barq-frontend barq-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:main-${{ github.sha }} -n barq-system
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/barq-backend -n barq-system --timeout=600s
        kubectl rollout status deployment/barq-frontend -n barq-system --timeout=600s

    - name: Production Health Checks
      run: |
        kubectl wait --for=condition=ready pod -l app=barq-backend -n barq-system --timeout=300s
        kubectl wait --for=condition=ready pod -l app=barq-frontend -n barq-system --timeout=300s
        
        # Comprehensive health checks
        BACKEND_URL=$(kubectl get service barq-backend-service -n barq-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        FRONTEND_URL=$(kubectl get service barq-frontend-service -n barq-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # API health checks
        curl -f http://$BACKEND_URL/health || exit 1
        curl -f http://$BACKEND_URL/health/ready || exit 1
        curl -f http://$FRONTEND_URL/health || exit 1
        
        # Database connectivity check
        kubectl exec -n barq-system deployment/barq-backend -- curl -f http://localhost:8080/health/database || exit 1

    - name: Switch Traffic (Blue-Green)
      run: |
        # Update service selectors to point to new deployment
        kubectl patch service barq-backend-service -n barq-system -p '{"spec":{"selector":{"version":"v2"}}}'
        kubectl patch service barq-frontend-service -n barq-system -p '{"spec":{"selector":{"version":"v2"}}}'
        
        # Wait for traffic switch
        sleep 30
        
        # Final verification
        BACKEND_URL=$(kubectl get service barq-backend-service -n barq-system -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        curl -f http://$BACKEND_URL/health || exit 1

    - name: Cleanup Old Deployment
      run: |
        # Remove old deployment after successful switch
        kubectl delete deployment barq-backend-v1 -n barq-system --ignore-not-found=true
        kubectl delete deployment barq-frontend-v1 -n barq-system --ignore-not-found=true

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
