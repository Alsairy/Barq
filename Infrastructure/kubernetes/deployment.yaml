apiVersion: apps/v1
kind: Deployment
metadata:
  name: barq-backend
  namespace: barq-system
  labels:
    app: barq-backend
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: barq-backend
      version: v1
  template:
    metadata:
      labels:
        app: barq-backend
        version: v1
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: barq-backend
      automountServiceAccountToken: false
      containers:
      - name: barq-backend
        image: ${BACKEND_IMAGE:-barq/backend:latest}@sha256:placeholder
        ports:
        - containerPort: 8080
          name: http
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        volumeMounts:
        - name: config-volume
          mountPath: /app/appsettings.json
          subPath: appsettings.json
        - name: tmp
          mountPath: /tmp
        - name: backend-secrets
          mountPath: /etc/secrets
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: barq-config
      - name: tmp
        emptyDir: {}
      - name: backend-secrets
        secret:
          secretName: barq-secrets
      imagePullSecrets:
      - name: barq-registry-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: barq-frontend
  namespace: barq-system
  labels:
    app: barq-frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: barq-frontend
      version: v1
  template:
    metadata:
      labels:
        app: barq-frontend
        version: v1
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: barq-frontend
      automountServiceAccountToken: false
      containers:
      - name: barq-frontend
        image: ${FRONTEND_IMAGE:-barq/frontend:latest}@sha256:placeholder
        ports:
        - containerPort: 80
          name: http
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: barq-frontend-config
      - name: tmp
        emptyDir: {}
      - name: var-cache-nginx
        emptyDir: {}
      - name: var-run
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: barq-database
  namespace: barq-system
  labels:
    app: barq-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: barq-database
  template:
    metadata:
      labels:
        app: barq-database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: barq-database
      automountServiceAccountToken: false
      containers:
      - name: postgres
        image: postgres:15-alpine@sha256:placeholder
        ports:
        - containerPort: 5432
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - SETGID
            - SETUID
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: POSTGRES_DB
          value: "BarqDB"
        - name: POSTGRES_USER
          value: "barq_user"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: database.conf
        - name: tmp
          mountPath: /tmp
        - name: database-secrets
          mountPath: /etc/secrets
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - barq_user
            - -d
            - BarqDB
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - barq_user
            - -d
            - BarqDB
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: barq-database-pvc
      - name: postgres-config
        configMap:
          name: barq-config
      - name: tmp
        emptyDir: {}
      - name: database-secrets
        secret:
          secretName: barq-secrets
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: barq-redis
  namespace: barq-system
  labels:
    app: barq-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: barq-redis
  template:
    metadata:
      labels:
        app: barq-redis
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: barq-redis
      automountServiceAccountToken: false
      containers:
      - name: redis
        image: redis:7-alpine@sha256:placeholder
        ports:
        - containerPort: 6379
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        - name: redis-secrets
          mountPath: /etc/secrets
          readOnly: true
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: barq-redis-pvc
      - name: tmp
        emptyDir: {}
      - name: redis-secrets
        secret:
          secretName: barq-secrets
